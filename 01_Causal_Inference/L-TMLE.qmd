---
title: "Longitudinal TMLE"
execute: 
  cache: true
---

# 複数時点での介入の因果効果の推定

@Hernan2020 では、TMLEは時間依存交絡などに対処するG-Methodの一般化として提示されている。ここでは`ltmle`パッケージを用いた時間依存交絡への対処を中心に記述する。

## 下準備

### ライブラリなど


```{r}
#| message: false

library(tidyverse)
library(broom)
library(SuperLearner)
library(ltmle)
library(randomForest)
library(ggdag)
library(future)

kable <- partial(
  knitr::kable,
  digits = 3
)

options(mc.cores = 8)
plan(strategy = 'multisession')

set.seed(95)
```


### データの作成

以下のDAGを考える

```{r}

dagify(
  L1 ~ A0 + U1,
  A1 ~ A0 + L1,
  Y ~ U1,
  exposure = c('A0', 'A1'), 
  outcome = 'Y', 
  coords = list(x = c(A0 = 0, L1 = 1, A1 = 2, U1 = 1, Y = 3),
                y = c(A0 = 0, L1 = 0, A1 = 0, U1 = -1, Y = 0))
) |> 
  ggdag()+
  theme_dag()

```

TreatmentはA0とA1であるが、ここからYへのpathはないので、因果効果は全ての組み合わせについて0になる

具体的には、potential outcomeのすべての組み合わせについて、差分を取った値が0になる

\begin{align}
\mathrm{E}[Y^{0, 0} - Y^{1, 0}] &= 0\\ 
\mathrm{E}[Y^{0, 0} - Y^{0, 1}] &= 0\\
\mathrm{E}[Y^{0, 0} - Y^{1, 1}] &= 0\\
\mathrm{E}[Y^{1, 0} - Y^{0, 1}] &= 0\\
\mathrm{E}[Y^{1, 0} - Y^{1, 1}] &= 0\\
\mathrm{E}[Y^{0, 1} - Y^{1, 1}] &= 0
\end{align}


```{r}
generate_data <- function(n){ 
    A0 <- rbinom(n, size=1, prob=0.3) # binary treatment
    U1 <- rnorm(n, mean = 0, sd = 1) # latent continuous confounder
    L1 <- 0.1 + 0.3*A0 + 0.3*U1 + rnorm(n, sd = 0.1)
    A1 <- rbinom(n, size=1, prob = plogis(-0.2 + 0.3*L1 + 0.02*L1^2)) # binary treatment
    Y <- -0.2 + 0.5*U1 + rnorm(n, sd = 0.1) # continuous outcome depends on confounders
    return(tibble(Y, A0, A1, L1, U1))
}

data_obs <- generate_data(1000)
```

- A0の因果効果

```{r}

data_obs |> 
  lm(Y ~ A0, data = _) |> 
  tidy() |> 
  kable()

```

- A1の因果効果

```{r}

data_obs |> 
  lm(Y ~ A1 + L1, data = _) |> 
  tidy() |> 
  kable()

```


- collider bias

$L_1$を条件づけると、$A_0 \to L_1 \gets U_1 \to Y$というパスが開いて、バイアスをもたらす

```{r}

data_obs |> 
  lm(Y ~ A0 + L1, data = _) |> 
  tidy() |> 
  kable()

```


```{r}

data_obs |> 
  lm(Y ~ A0*A1, data = _) |> 
  tidy() |> 
  kable()

```


## IPW

@Hernan2020 にて紹介されている方法

以下のウェイトを作成する

$$
W^{A_0, A_1} = \frac{1}{f(A_0 | L_0)} \times \frac{1}{f(A_1 | A_0, L_0, L_1)}
$$

今回はベースライン共変量がない（$L_0 = \varnothing$）ので

$$
W^{A_0, A_1} = \frac{1}{f(A_0)} \times \frac{1}{f(A_1 | A_0, L_1)}
$$

```{r}
res_ipw <-
  broom::augment_columns(
    glm(A0 ~ 1, data = data_obs, family = 'binomial'), 
    data = data_obs, 
    type.predict = 'response'
  ) |> 
  # A0に対するウェイト
  mutate(
    ipw_A0 = case_when(
      A0 == 1 ~ 1 / .fitted,
      A0 == 0 ~ 1 / (1 - .fitted)
    )
  ) |> 
  select(Y:U1, ipw_A0) |> 
  broom::augment_columns(
    glm(A1 ~ A0 + L1 + I(L1^2), data = data_obs, family = 'binomial'),
    data = _,
    type.predict = 'response'
  ) |> 
  mutate(
    # A1に対するウェイト
    ipw_A1 = case_when(
      A1 == 1 ~ 1 / .fitted,
      A1 == 0 ~ 1 / (1 - .fitted)
    )
  ) |> 
  select(Y:U1, ipw_A0, ipw_A1) |> 
  # A0に対するウェイトとA1に対するウェイトをかけ算
  mutate(ipw = ipw_A0*ipw_A1) |> 
  # 重み付け推定
  summarise(CFmean = weighted.mean(Y, ipw), .by = c(A0, A1)) |> 
  arrange(A0, A1)

```

ipwによる各treatment strategyにおけるcounterfactual mean

```{r}

res_ipw

```

counterfactual meanの差分

```{r}

cross_join(
  res_ipw |> 
    mutate(A0_A1 = str_c(A0, ',', A1)) |> 
    select(A0_A1, CFmean),
  res_ipw |> 
    mutate(A0_A1 = str_c(A0, ',', A1)) |> 
    select(A0_A1, CFmean)
  ) |> 
  filter(A0_A1.x != A0_A1.y) |> 
  mutate(ATE = CFmean.y - CFmean.x)
  

```


## Longitudinal TMLE

- `ltmle`による実装

```{r}

res_tmle <- 
  ltmle::ltmle(
    # データセットの列の順番が大切
    data = data_obs |> select(A0, L1, A1, Y), 
    Anodes = c('A0', 'A1'), 
    Lnodes = 'L1',
    Ynodes = 'Y',
    abar = list(treatment = c(1, 1), control = c(0, 0)), 
    SL.library = c('SL.glm', 'SL.gam', 'SL.randomForest')
  )


summary(res_tmle)


```



## 他のパッケージ

`ltmle`はメジャー（？）だが、あんまり汎用性が高いと言えず、開発も盛んなようには見えない。ほかにlongitudinal TMLEを実装しているパッケージとして[`lmtp`](https://github.com/nt-williams/lmtp)や[`stremr`](https://github.com/osofr/stremr)がある。`lmtp`はCRANにも登録してあり、試してみる価値あり。`stremr`はさまざまなアプローチの統合を目指す非常に意欲的なパッケージだが、開発は止まっている？っぽい。


