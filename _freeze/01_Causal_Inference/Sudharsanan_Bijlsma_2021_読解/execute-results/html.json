{
  "hash": "43e6a51142e76a0474176b10443396a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sudharsanan_Bijlsma_2021_Educational note 読解\"\n---\n\n\n## 下準備\n\n- パッケージ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(cfdecomp)\n\nkable <- partial(\n  knitr::kable,\n  digits = 3\n)\n```\n:::\n\n\n- データ\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the decomposition functions in our package are computationally intensive\n# to make the example run quick, I perform it on a subsample (n=125) of the data:\nset.seed(100)\ndata <- \n  cfd.example.data[sample(1000),] |> \n  select(SES, age, med.gauss, out.gauss, id) |> \n  as_tibble()\n```\n:::\n\n\n## パッケージによる推定\n\n- `cfdecomp`パッケージで推定\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cfd.mean \nmean.results.1 <- \n  cfd.mean(\n    formula.y = out.gauss ~ SES * med.gauss * age,\n    formula.m = med.gauss ~ SES * age,\n    mediator = 'med.gauss',\n    group = 'SES',\n    data = as.data.frame(data),\n    family.y = 'gaussian',\n    family.m = 'gaussian',\n    bs.size=250,\n    mc.size=10,\n    alpha=0.05,\n    # cluster.sample=FALSE,\n    # cluster.name='id'\n  )\n```\n:::\n\n\n- SES2とSES3のmediatorの分布をSES1のmediatorの分布に揃える\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  category = c(\"SES1\", \"SES2\", \"SES3\"),\n  factual_mean = c(\n    mean(mean.results.1$out_nc_y[, 1]),\n    mean(mean.results.1$out_nc_y[, 2]),\n    mean(mean.results.1$out_nc_y[, 3])\n  ),\n  # and after giving the gaussian mediator of SES group 2 the distribution of the one in group 1\n  # the difference becomes:\n  counterfactual_mean = c(\n    mean(mean.results.1$out_cf_y[, 1]),\n    mean(mean.results.1$out_cf_y[, 2]),\n    mean(mean.results.1$out_cf_y[, 3])\n  )) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|category | factual_mean| counterfactual_mean|\n|:--------|------------:|-------------------:|\n|SES1     |        4.306|               4.306|\n|SES2     |        3.239|               3.511|\n|SES3     |        2.212|               2.946|\n\n\n:::\n:::\n\n\n\n## 自分でコードを書いてみる\n\n## step 1: regression estimates \n\n- mediatorとoutcomeのモデルをデータから推定\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmediator_model <- lm(med.gauss ~ SES * age, data = data)\noutcome_model <- lm(out.gauss ~ SES * age * med.gauss, data = data)\n```\n:::\n\n\n## step 2: simulate the natural-course pseudo-population\n\n- 推定したmediatorのモデルから、mediatorの「分布」を再現\n\n\\begin{align*}\nMed_i = \\mathrm{E}[Med | X] + e_i \\\\\ne_i \\sim \\mathrm{N}(0, \\sigma)\n\\end{align*}\n\n- mediatorの分布のパラメータを取得\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# predict mediator\n# mediatorの「分布」のパラメータを取得\npred_mean_m <- predict(mediator_model, newdata = data, type = \"response\")\nresidual_ref_m <- mediator_model$residuals\nsd_ref_m <- sd(residual_ref_m)\n```\n:::\n\n\n- 推定したパラメータをもとに、mediatorの値をシミュレート\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_nc_med <- \n  data |> \n  mutate(\n    # ランダム性なし\n    pred_med = pred_mean_m,\n    # ランダム性をもたせる1（推定した標準偏差のパラメータを使用）\n    pred_med_draw_1 = rnorm(n(), mean = pred_mean_m, sd = sd_ref_m),\n    # ランダム性をもたせる2（残差からランダムにサンプリング）\n    pred_med_draw_2 = pred_mean_m + sample(residual_ref_m, n(), replace = TRUE)\n  )\n\ndf_nc_med |> \n  summarise(\n    across(c(med.gauss, pred_med:pred_med_draw_2), mean),\n    .by = SES\n  ) |> \n  arrange(SES) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|SES | med.gauss| pred_med| pred_med_draw_1| pred_med_draw_2|\n|:---|---------:|--------:|---------------:|---------------:|\n|1   |     8.428|    8.428|           8.418|           8.286|\n|2   |     7.223|    7.223|           7.276|           7.454|\n|3   |     5.410|    5.410|           5.579|           5.374|\n\n\n:::\n:::\n\n\n- シミュレートした値をoutcomeモデルに代入して予測値を計算・集計\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_nc_med |> \n  mutate(\n    # ランダム性なし\n    pred_out = predict(\n      outcome_model, newdata = df_nc_med |> mutate(med.gauss = pred_med)\n    ),\n    # ランダム性をもたせる1（推定した標準偏差のパラメータを使用）\n    pred_out_draw_1 = predict(\n      outcome_model, newdata = df_nc_med |> mutate(med.gauss = pred_med_draw_1)\n    ),\n    # ランダム性をもたせる2（残差からランダムにサンプリング）\n    pred_out_draw_2 = predict(\n      outcome_model, newdata = df_nc_med |> mutate(med.gauss = pred_med_draw_2)\n    )\n  ) |> \n  summarise(\n    across(c(out.gauss, pred_out:pred_out_draw_2), mean),\n    .by = SES\n  ) |> \n  arrange(SES) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|SES | out.gauss| pred_out| pred_out_draw_1| pred_out_draw_2|\n|:---|---------:|--------:|---------------:|---------------:|\n|1   |     4.309|    4.309|           4.312|           4.286|\n|2   |     3.237|    3.237|           3.249|           3.292|\n|3   |     2.217|    2.217|           2.254|           2.214|\n\n\n:::\n:::\n\n\n## step 3: simulate the counterfactual pseudo-population\n\n- 推定したmediatorのモデルにおいて、全員のSESが1だった場合のmediatorの分布を再現\n- 全員のSESを1にしてmediatorのパラメータを取得\n- 回帰モデルでは残差の部分は共変量に依存しない（SES間で分布が同じ、平均0・共通の標準偏差の正規分布）\n  - ならばSESが1のグループの標準偏差を使わなくても良いのでは？（全体の標準偏差でもよい）\n  - 標準偏差もグループによって異なる、といったモデルの場合にはどうなるか？\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 平均\npred_mean_m_SES1 <- predict(mediator_model, newdata = data |> mutate(SES = '1'))\n# SES = 1のグループの残差\nresidual_ref_m_SES1 <-\n  broom::augment(mediator_model)  |>\n  filter(SES == '1') |> \n  pull(.resid)\n# 標準偏差\nsd_ref_m_SES1 <- sd(residual_ref_m_SES1)\n```\n:::\n\n\n- 推定したパラメータをもとに、mediatorの値をシミュレート\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_cf_med <- \n  data |> \n  mutate(\n    # ランダム性なし\n    pred_med_SES1 = pred_mean_m_SES1,\n    # ランダム性をもたせる1（推定した標準偏差のパラメータを使用）\n    pred_med_draw_1_SES1 = rnorm(n(), mean = pred_mean_m_SES1, sd = sd_ref_m_SES1),\n    # ランダム性をもたせる2（残差からランダムにサンプリング）\n    pred_med_draw_2_SES1 = pred_mean_m_SES1 + sample(residual_ref_m_SES1, n(), replace = TRUE)\n  )\n\ndf_cf_med |> \n  summarise(\n    across(c(med.gauss, pred_med_SES1:pred_med_draw_2_SES1), mean),\n    .by = SES\n  ) |> \n  arrange(SES) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|SES | med.gauss| pred_med_SES1| pred_med_draw_1_SES1| pred_med_draw_2_SES1|\n|:---|---------:|-------------:|--------------------:|--------------------:|\n|1   |     8.428|         8.428|                8.386|                8.632|\n|2   |     7.223|         8.337|                8.258|                8.292|\n|3   |     5.410|         8.442|                8.292|                8.593|\n\n\n:::\n:::\n\n\n- シミュレートした値をoutcomeモデルに代入して予測値を計算・集計\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_cf_med |> \n  mutate(\n    # ランダム性なし\n    pred_out_SES1 = predict(\n      outcome_model, newdata = df_cf_med |> mutate(med.gauss = pred_med_SES1)\n    ),\n    # ランダム性をもたせる1（推定した標準偏差のパラメータを使用）\n    pred_out_draw_1_SES1 = predict(\n      outcome_model, newdata = df_cf_med |> mutate(med.gauss = pred_med_draw_1_SES1)\n    ),\n    # ランダム性をもたせる2（残差からランダムにサンプリング）\n    pred_out_draw_2_SES1 = predict(\n      outcome_model, newdata = df_cf_med |> mutate(med.gauss = pred_med_draw_2_SES1)\n    )\n  ) |> \n  summarise(\n    across(c(out.gauss, pred_out_SES1:pred_out_draw_2_SES1), mean),\n    .by = SES\n  ) |> \n  arrange(SES) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|SES | out.gauss| pred_out_SES1| pred_out_draw_1_SES1| pred_out_draw_2_SES1|\n|:---|---------:|-------------:|--------------------:|--------------------:|\n|1   |     4.309|         4.309|                4.303|                4.347|\n|2   |     3.237|         3.507|                3.485|                3.498|\n|3   |     2.217|         2.949|                2.920|                2.979|\n\n\n:::\n:::\n\n\n\n## monte carloとbootstrapの実装\n\n- 実際にはrandom drawは一回ではなく何回か行うことで不確実性を表現する\n- 標準誤差の推定のためにbootstrap法も必要\n- まずはtreatmentとoutcomeのモデルを推定し、パラメータを取得\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# パラメータ推定\nestimate_model <- function(data) {\n  \n  mediator_model <- lm(med.gauss ~ SES * age, data = data)\n  outcome_model <- lm(out.gauss ~ SES * age * med.gauss, data = data)\n  \n  pred_mean_m <- predict(mediator_model, newdata = data, type = \"response\")\n  residual_ref_m <- mediator_model$residuals\n  sd_ref_m <- sd(residual_ref_m)\n\n  pred_mean_m_SES1 <- predict(mediator_model, newdata = data |> mutate(SES = '1'))\n  residual_ref_m_SES1 <-\n    broom::augment(mediator_model)  |>\n    filter(SES == '1') |> \n    pull(.resid)\n  sd_ref_m_SES1 <- sd(residual_ref_m_SES1)\n\n}\n```\n:::\n\n\n- パラメータをもとにmediatorをシミュレートするのを何回か繰り返す\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmontecarlo_sampling <- function(data, mc = 10) {\n  # パラメータ推定\n  estimate_model(data)\n  # モンテカルロシミュレーション\n  map(1:mc, \\(mc) {\n    # mediatorサンプリング\n    boot_sample <- \n      data |> \n      mutate(\n        pred_med_draw_1 = rnorm(n(), mean = pred_mean_m, sd = sd_ref_m),\n        pred_med_draw_2 = pred_mean_m + sample(residual_ref_m, n(), replace = TRUE),\n        pred_med_draw_1_SES1 = rnorm(n(), mean = pred_mean_m_SES1, sd = sd_ref_m_SES1),\n        pred_med_draw_2_SES1 = pred_mean_m_SES1 + sample(residual_ref_m_SES1, n(), replace = TRUE),\n      )\n    # サンプリングしたものからoutcome予測\n    boot_sample |> \n      mutate(\n        pred_out_draw_1 = predict(\n          outcome_model, newdata = boot_sample |> mutate(med.gauss = pred_med_draw_1)\n        ),\n        pred_out_draw_2 = predict(\n          outcome_model, newdata = boot_sample |> mutate(med.gauss = pred_med_draw_2)\n        ),\n        pred_out_draw_1_SES1 = predict(\n          outcome_model, newdata = boot_sample |> mutate(med.gauss = pred_med_draw_1_SES1)\n        ),\n        pred_out_draw_2_SES1 = predict(\n          outcome_model, newdata = boot_sample |> mutate(med.gauss = pred_med_draw_2_SES1)\n        )\n      ) |> \n      group_by(SES) |> \n      summarise(across(c(pred_out_draw_1:pred_out_draw_2_SES1), mean))\n    \n  }) |> \n    list_rbind(names_to = 'mc') |> \n    # シミュレーション結果を集計\n    group_by(SES) |> \n    summarise(across(c(pred_out_draw_1:pred_out_draw_2_SES1), mean))\n  \n}\n```\n:::\n\n\n- これをbootstrapで繰り返す\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- \n  map(1:250, \\(index) {\n    # bootstrapサンプル発生\n    bootsample <- slice_sample(data, prop = 1, replace = TRUE)\n    montecarlo_sampling(bootsample, mc = 10) \n  }) |> \n  list_rbind(names_to = 'index')\n```\n:::\n\n\n- 結果を集計\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult |> \n  pivot_longer(\n    cols = c(pred_out_draw_1:pred_out_draw_2_SES1), \n    names_to = 'type', \n    values_to = 'value'\n  ) |> \n  summarise(\n    mean = mean(value), \n    conf.low = quantile(value, 0.025),\n    conf.high = quantile(value, 0.975),\n    .by = c(SES, type)\n  ) |> \n  arrange(type) |> \n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|SES |type                 |  mean| conf.low| conf.high|\n|:---|:--------------------|-----:|--------:|---------:|\n|1   |pred_out_draw_1      | 4.015|    3.937|     4.091|\n|2   |pred_out_draw_1      | 3.183|    3.124|     3.251|\n|3   |pred_out_draw_1      | 2.645|    2.599|     2.688|\n|1   |pred_out_draw_1_SES1 | 4.276|    4.193|     4.351|\n|2   |pred_out_draw_1_SES1 | 3.513|    3.446|     3.582|\n|3   |pred_out_draw_1_SES1 | 2.970|    2.934|     3.000|\n|1   |pred_out_draw_2      | 4.015|    3.938|     4.094|\n|2   |pred_out_draw_2      | 3.182|    3.123|     3.253|\n|3   |pred_out_draw_2      | 2.646|    2.600|     2.687|\n|1   |pred_out_draw_2_SES1 | 4.276|    4.183|     4.358|\n|2   |pred_out_draw_2_SES1 | 3.515|    3.457|     3.584|\n|3   |pred_out_draw_2_SES1 | 2.970|    2.941|     2.998|\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}