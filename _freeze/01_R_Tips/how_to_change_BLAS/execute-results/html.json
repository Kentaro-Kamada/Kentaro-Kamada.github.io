{
  "hash": "e5c675420bfbcf73d5ce3af3bbf096a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"BLASの変更によるRの高速化\"\nengine: knitr\n---\n\n\n## 参考\n\n- [Do GPU-based Basic Linear Algebra Subprograms (BLAS) improve the performance of standard modeling techniques in R?](https://www.inwt-statistics.com/blog/basic-linear-algebra-subprograms-in-r)\n- [Even faster matrix math in R on macOS with M1](https://mpopov.com/blog/2021/10/10/even-faster-matrix-math-in-r-on-macos-with-m1/)\n- [NVBLASを使って「R」の並列演算処理を高速化](https://www.nttpc.co.jp/gpu/article/benchmark05.html)\n\n## 概要\n\nR言語の計算速度はそれほど速くはないが、いくつか工夫することで高速化が可能。\n\n- ベクトル演算の駆使\n- 並列化（paralell, future, furrrなど）\n- BLAS (Basic Linear Algebra Subprograms) の変更\n\n今回はBLASの変更による高速化について。\n\n## BLASとは\n\nBLASは、行列演算を高速に行うためのライブラリ。たとえば分散や共分散を計算するときは、行列の掛け算をする必要がある。機械学習やニューラルネットワークでは行列の掛け算が多用されるため、BLASの高速化は全体としての計算速度の向上に大きく貢献する。\n\nBLASはオープンソースのものもあるが、各CPU、GPUメーカーがそれぞれのチップに適したライブラリを提供している。\n\n- RについてるBLAS\n  - RにデフォルトでついてくるBLAS\n- OpenBLAS\n  - オープンソースのBLASで、homebrewでインストール可能\n  - pythonのnumpyで使われているらしい\n- ATLAS\n  - こちらもオープンソース\n- MKL\n  - Intelが提供するBLAS\n  - Macだと使えない\n- NVBLAS\n  - NVIDIAが提供するBLAS\n  - GPUを使用するのでめちゃくちゃ速いらしい\n  - NVIDIAのGPUじゃないと使えない...\n- **Accelerate** \n  - Appleが提供\n  - 今回使用するやつ\n\n\n## BLASの変更\n\n以下、homebrewでRをインストールしていることを前提とする。\n\nterminalで以下のコマンドを実行する。\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /Library/Frameworks/R.framework/Resources/lib\nln -sf libRblas.veclib.dylib libRblas.dylib\n\n```\n:::\n\n\n意味としては、Rは`libRblas.dylib`をBLASとして認識するので、`libRblas.veclib.dylib`を`libRblas.dylib`にリンクすることで、`libRblas.veclib.dylib`をBLASとして使うようにする。\n\nもどすときは`libRblas.veclib.dylib`の代わりに、`libRblas.0.dylib`（デフォルトのBLAS）をリンクすればよい。\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /Library/Frameworks/R.framework/Resources/lib\nln -sf libRblas.0.dylib libRblas.dylib\n\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}