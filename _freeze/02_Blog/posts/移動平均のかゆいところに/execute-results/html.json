{
  "hash": "1d345e8a33557d32ddd0b947f4154a6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"移動平均のかゆいところに，partial = TRUE\"\ndate: 2020-10-25\ncategories: [R]\n---\n\n\n\n\n## はじめに\n\n『前処理大全』の4章で移動平均の計算が出てきたのでメモ。\n\n移動平均の基本的な算出方法は[「dplyrを使いこなす！Window関数編」](https://qiita.com/matsuou1/items/db6e8c48fcfd791dd876)などが詳しい。\n\n## 移動平均の基本\n\nxにこんな感じでデータ入っているとき，移動平均は以下のように計算される。\n\n（以下ではすべて，3つずつ計算，右詰め，の前提で書く）\n\n|  x|rollsum |rollmean  |\n|--:|:-------|:---------|\n|  1|NA      |NA        |\n|  2|NA      |NA        |\n|  3|1+2+3   |(1+2+3)/3 |\n|  4|2+3+4   |(2+3+4)/3 |\n|  5|3+4+5   |(3+4+5)/3 |\n|  6|4+5+6   |(4+5+6)/3 |\n\nRで実装するとこんな感じになる\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntibble(x = 1:6) |> \n  mutate(\n    rollsum = RcppRoll::roll_sum(x, n = 3L, align = 'right', fill = NA),\n    rollmean = RcppRoll::roll_mean(x, n = 3L, align = 'right', fill = NA)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x rollsum rollmean\n  <int>   <dbl>    <dbl>\n1     1      NA       NA\n2     2      NA       NA\n3     3       6        2\n4     4       9        3\n5     5      12        4\n6     6      15        5\n```\n\n\n:::\n:::\n\n\n\n## 移動平均のかゆいところ\n\nここまでの移動平均は，値が3つ揃っているところだけ計算し，3つに満たない端っこのケースに関しては欠損で埋める，というルールで計算している。\n\nただし，場合によっては**3件に満たない場合でも欠損値扱いにせずに平均値を計算したい**，という場合もあるだろう。\n\n（イメージ）\n\n|  x|rollsum |rollmean  |\n|--:|:-------|:---------|\n|  1|1       |1/1       |\n|  2|1+2     |(1+2)/2   |\n|  3|1+2+3   |(1+2+3)/3 |\n|  4|2+3+4   |(2+3+4)/3 |\n|  5|3+4+5   |(3+4+5)/3 |\n|  6|4+5+6   |(4+5+6)/3 |\n\n『前処理大全』でもこのようなケースが扱われており，Rのサンプルコードでは`lag`と条件式の組み合わせで突破していたが，あんまりきれいじゃない。\n\n## `zoo::rollapply`を用いた実装\n\n以上の問題を解決するには`zoo::rollapply()`が有効である。\n\nこの関数の引数で，`partial = TRUE`とすると，以上の問題に対処できる。\n\n詳しくは[vignette](https://cran.r-project.org/web/packages/zoo/zoo.pdf)を参照。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 1:6) |> \n  mutate(\n    rollsum = zoo::rollapply(x, width = 3L, FUN = sum, align = 'right', partial = TRUE),\n    rollmean = zoo::rollapply(x, width = 3L, FUN = mean, align = 'right', partial = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x rollsum rollmean\n  <int>   <int>    <dbl>\n1     1       1      1  \n2     2       3      1.5\n3     3       6      2  \n4     4       9      3  \n5     5      12      4  \n6     6      15      5  \n```\n\n\n:::\n:::\n\n\n\nこの場合1行目の値は和でも平均でも，元のデータがダイレクトに反映されることになる。\n\n**最低でも2つ以上の値の場合だけ計算したい！**という時は，`partial = 2L`のように，引数に整数を入れればよい。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 1:6) |> \n  mutate(\n    rollsum = zoo::rollapply(x, width = 3L, FUN = sum, align = 'right', fill = NA, partial = 2L),\n    rollmean = zoo::rollapply(x, width = 3L, FUN = mean, align = 'right', fill = NA, partial = 2L)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n      x rollsum rollmean\n  <int>   <int>    <dbl>\n1     1      NA     NA  \n2     2       3      1.5\n3     3       6      2  \n4     4       9      3  \n5     5      12      4  \n6     6      15      5  \n```\n\n\n:::\n:::\n\n\n\nまた，なぜか`zoo::rollsum`や`zoo::rollmean`で`partial = TRUE`としても上手くいかない。なぜ…？\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzoo::rollapply(1:6, width = 3L, FUN = mean, align = 'right', partial = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.0 1.5 2.0 3.0 4.0 5.0\n```\n\n\n:::\n\n```{.r .cell-code}\nzoo::rollmean(1:6, k = 3L, align = 'right', partial = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n## `RcppRoll`にも`partial`があるが… \n\n移動平均といえば`RcppRoll`を使う人が多いはず。速度もzooより断然速いので基本的にはこちらを使うべきと筆者も思っている。\n\n実は`RcppRoll`の関数にも`partial`引数が入っている。\n\nこれを見た時に「これで行けるやん」と思ったのだが…\n\n>partial Partial application? Currently unimplemented.\n<https://cran.r-project.org/web/packages/RcppRoll/RcppRoll.pdf>\n\n実装されてませんでした…\n\n## まとめ\n\nというわけで，移動平均の計算は通常時は`RcppRoll`を使いつつ，ああいった特殊な場合には`zoo`を使えばよいということがわかった。`RcppRoll`は早く`partial`を実装してほしいところ。\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}