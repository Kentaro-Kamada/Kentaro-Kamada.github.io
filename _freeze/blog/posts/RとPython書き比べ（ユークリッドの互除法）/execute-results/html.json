{
  "hash": "9c1da52da80079f34e48c5b386f4761d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"RとPython書き比べ（ユークリッドの互除法）\"\ndate: 2020-07-31\ncategories: [R, Python]\nengine: knitr\n---\n\n\n\n\n## ユークリッドの互除法\n\nユークリッドの互除法は\n\n- 2つの自然数の**最大公約数**（GCD: Greatest Common Diviser）を求めるアルゴリズム\n- そのために以下の性質を利用\n\n$a$, $b$は自然数で$a \\neq 0$のとき\n\n等式：$a = bq + r$において，$\\mathrm{GCD}(a, b) = \\mathrm{GCD}(b, r)$が成り立つ\n\nこの性質を利用して，\n\n「$a$を$b$で割って余り$r_1$を算出」→「$b$を$r_1$で割って余り$r_2$を算出」→…\n\n→「$r_{n-1}$を$r_n$で割ると割り切れた」\n\n→$\\mathrm{GCD}(r_{n-1}, r_n) = \\mathrm{GCD}(r_{n-2}, n_{n-1})= ...=\\mathrm{GCD}(b, r_1) = \\mathrm{GCD}(a, b) = r_n$\n\nという形で最大公約数を求める\n\n## Rで関数を実装\n\n- 関数定義\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ユークリッドの互除法\ngcd <- function(a, b){\n  if (!(a %% 1 == 0 & b %% 1 == 0 & a > 0 & b > 0)) {\n    cat('入力が自然数じゃないのでやり直し')\n  } \n  else if (a < b) {\n    w <- a\n    a <- b\n    b <- w\n  }\n  while (b != 0) {\n    r <- a %% b\n    a <- b\n    b <- r\n  }\n  return(a)\n}\n```\n:::\n\n\n\n- 実行結果\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngcd(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 163\n```\n\n\n:::\n:::\n\n\n\n## Pythonで実装\n\n- 関数定義\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# ユークリッドの互除法\ndef gcd(a, b):\n  if not (a % 1 == 0 and b % 1 == 0 and a > 0 and b > 0):\n    print('入力が自然数じゃないのでやり直し')\n  elif a < b:\n    w = a\n    a = b\n    b = w\n  while not b == 0:\n    r = a % b\n    a = b\n    b = r\n  else:\n    return(a)\n```\n:::\n\n\n\n- 実行結果\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngcd(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n163\n```\n\n\n:::\n:::\n\n\n\n## 両言語の比較\n\n### 1. 制御構文\n\n|動作      |R                            |Python              |\n|:---------|:----------------------------|:-------------------|\n|関数定義  |name <- function(引数){処理} |def name(引数):処理 |\n|条件分岐1 |if(条件式){処理}             |if 条件式:処理      |\n|条件分岐2 |else if(条件式){処理}        |elif 条件式:処理    |\n|繰り返し  |while(条件式){処理}          |while 条件式:処理   |\n\n\n### 2. 演算子など\n\n|動作   |R      |Python |\n|:------|:------|:------|\n|整数商 |%/%    |//     |\n|剰余   |%%     |%      |\n|論理積 |&      |and    |\n|論理和 |&#124; |or     |\n|否定   |!      |not    |\n\nRでは一貫して記号で演算子が与えられている一方，\nPythonは条件分岐に関わる部分はアルファベットが用いられている。\n\nRの論理演算子がfilter処理とかで多用されることがイメージされている一方，\nPythonはもっぱら条件分岐での使用がイメージされてそう？\n（`if not ～`とかは自然に読みやすいけど，`filter(a == 1 and b <= 3 and ～)`は長くなって読みにくいみたいな）\n\n\n## 追記\n\n### 制御フローの見直し\n\n#### R\n\n- 変数の代入の部分を`;`を用いて一列にできるらしい（やってることは変わらない）\n- Pythonみたいな`a, b = b, a`という書き方はできず，中間変数を使わざるを得ない\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngcd2 <- function(a, b){\n  if (!(a %% 1 == 0 & b %% 1 == 0 & a > 0 & b > 0)) {\n    cat('入力が自然数じゃないのでやり直し')\n  } \n  else {\n    if(a < b){\n      tmp <- a; a <- b; b <- tmp\n    }\n    while(b != 0){\n      r <- a %% b; a <- b; b <- r \n    }\n    return(a)\n  }\n}\n```\n:::\n\n\n\n#### Python\n\n- `a, b = b, a`という記法が大変便利。スワップ処理とかで中間変数が必要ない。\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef gcd2(a, b):\n  if not (a % 1 == 0 and b % 1 == 0 and a > 0 and b > 0):\n    print('入力が自然数じゃないのでやり直し')\n  else:\n    if a < b:\n      a, b = b, a\n    while a % b != 0:\n      a, b = b, a % b\n    else:\n      return b\n```\n:::\n\n\n\n### 再帰関数を用いた実装\n\n再帰関数をコメントで教えてもらったので実装してみた。\n\n注意点として，`b == 0`になるまで繰り返してしまうと，引数が自然数という条件に反してしまうので，その一回前（`a % b == 0`）まで繰り返すように書き換える必要がある。\n\n- Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef gcd3(a,b):\n  if not (a % 1 == 0 and b % 1 == 0 and a > 0 and b > 0):\n    print('入力が自然数じゃないのでやり直し')\n  else:\n    if a < b:\n      a, b = b, a\n    if not a % b == 0:\n      return gcd3(b, a % b)\n    else:\n      return b\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngcd(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n163\n```\n\n\n:::\n\n```{.python .cell-code}\ngcd2(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n163\n```\n\n\n:::\n\n```{.python .cell-code}\ngcd3(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n163\n```\n\n\n:::\n:::\n\n\n\n- R\n\n再帰関数を呼び出す用の`Recall`という関数もある\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngcd3 <- function(a, b){\n  if (!(a %% 1 == 0 & b %% 1 == 0 & a > 0 & b > 0)) {\n    cat('入力が自然数じゃないのでやり直し')\n  } \n  else {\n    if (a < b) {\n      tmp <- a; a <- b; b <- tmp\n    }\n    if (a %% b != 0) {\n      return(Recall(b, a %% b)) # またはgcd(b, a %% b)\n    }\n    else return(b)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngcd(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 163\n```\n\n\n:::\n\n```{.r .cell-code}\ngcd2(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 163\n```\n\n\n:::\n\n```{.r .cell-code}\ngcd3(50856, 96007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 163\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}